!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).EventNotifier=t()}(this,function(){"use strict";return class{constructor(){this.listeners={}}addListener(e,t){if("string"!=typeof e||"function"!=typeof t)throw new Error("Event name must be a string, listener must be a function");this.listeners[e]=this.listeners[e]||new Set;const n=()=>this.removeListener(e,t);return this.listeners[e].has(t)||(this.listeners[e].add(t),"function"==typeof t.onCleanup&&t.onCleanup(n)),n}addOnceListener(e,t){if("string"!=typeof e||"function"!=typeof t)throw new Error("Event name must be a string, listener must be a function");const n=(...s)=>{this.removeListener(e,n),t(...s)};"function"==typeof t.onCleanup&&(n.onCleanup=t.onCleanup),this.addListener(e,n)}removeListener(e,t){if("string"!=typeof e||"function"!=typeof t)throw new Error("Event name must be a string, listener must be a function");this.listeners[e]&&this.listeners[e].has(t)&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e])}notify(e,...t){if(this.listeners[e]){[...this.listeners[e]].forEach(n=>{try{n(...t)}catch(t){console.error(`Error in listener for event ${e}:`,t)}})}}removeAllListeners(e){e?this.listeners[e]&&delete this.listeners[e]:this.listeners={}}}});
//# sourceMappingURL=index.umd.js.map
