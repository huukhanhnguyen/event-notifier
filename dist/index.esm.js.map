{"version":3,"file":"index.esm.js","sources":["../src/index.js"],"sourcesContent":["// src/index.js\r\n// tests/index.tests.js\r\n\r\nclass Notifier {\r\n    constructor() {\r\n        this.listeners = {};\r\n    }\r\n    addListener(event, listener) {\r\n        if (typeof event !== 'string' || typeof listener !== 'function') {\r\n            throw new Error('Event name must be a string, listener must be a function');\r\n        }\r\n        this.listeners[event] = this.listeners[event] || new Set();\r\n        const cleanup = () => this.removeListener(event, listener);\r\n        if (!this.listeners[event].has(listener)) {\r\n            this.listeners[event].add(listener);\r\n            if (typeof listener.onCleanup === 'function') {\r\n                listener.onCleanup(cleanup); // Subscriber Controlled Cleanup Pattern\r\n            }\r\n        }\r\n        return cleanup;\r\n    }\r\n    addOnceListener(event, listener) {\r\n        if (typeof event !== 'string' || typeof listener !== 'function') {\r\n            throw new Error('Event name must be a string, listener must be a function');\r\n        }\r\n        const wrapper = (...args) => {\r\n            this.removeListener(event, wrapper);\r\n            listener(...args);\r\n        };\r\n        // Preserve onCleanup from original listener\r\n        if (typeof listener.onCleanup === 'function') {\r\n            wrapper.onCleanup = listener.onCleanup;\r\n        }\r\n        this.addListener(event, wrapper);\r\n    }\r\n    removeListener(event, listener) {\r\n        if (typeof event !== 'string' || typeof listener !== 'function') {\r\n            throw new Error('Event name must be a string, listener must be a function');\r\n        }\r\n        if (this.listeners[event] && this.listeners[event].has(listener)) {\r\n            this.listeners[event].delete(listener);\r\n            if (this.listeners[event].size === 0) {\r\n                delete this.listeners[event];\r\n            }\r\n        }\r\n    }\r\n\r\n    notify(event, ...args) {\r\n        if (this.listeners[event]) {\r\n            const listeners = [...this.listeners[event]];\r\n            listeners.forEach(listener => {\r\n                try {\r\n                    listener(...args);\r\n                } catch (error) {\r\n                    console.error(`Error in listener for event ${event}:`, error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    removeAllListeners(event) {\r\n        if (event) {\r\n            if (this.listeners[event]) {\r\n                delete this.listeners[event];\r\n            }\r\n        } else {\r\n            this.listeners = {};\r\n        }\r\n    }\r\n}\r\n\r\nexport default Notifier;\r\n"],"names":["Notifier","constructor","this","listeners","addListener","event","listener","Error","Set","cleanup","removeListener","has","add","onCleanup","addOnceListener","wrapper","args","delete","size","notify","forEach","error","console","removeAllListeners"],"mappings":"AAGA,MAAMA,EACF,WAAAC,GACIC,KAAKC,UAAY,EACzB,CACI,WAAAC,CAAYC,EAAOC,GACf,GAAqB,iBAAVD,GAA0C,mBAAbC,EACpC,MAAM,IAAIC,MAAM,4DAEpBL,KAAKC,UAAUE,GAASH,KAAKC,UAAUE,IAAU,IAAIG,IACrD,MAAMC,EAAU,IAAMP,KAAKQ,eAAeL,EAAOC,GAOjD,OANKJ,KAAKC,UAAUE,GAAOM,IAAIL,KAC3BJ,KAAKC,UAAUE,GAAOO,IAAIN,GACQ,mBAAvBA,EAASO,WAChBP,EAASO,UAAUJ,IAGpBA,CACf,CACI,eAAAK,CAAgBT,EAAOC,GACnB,GAAqB,iBAAVD,GAA0C,mBAAbC,EACpC,MAAM,IAAIC,MAAM,4DAEpB,MAAMQ,EAAU,IAAIC,KAChBd,KAAKQ,eAAeL,EAAOU,GAC3BT,KAAYU,IAGkB,mBAAvBV,EAASO,YAChBE,EAAQF,UAAYP,EAASO,WAEjCX,KAAKE,YAAYC,EAAOU,EAChC,CACI,cAAAL,CAAeL,EAAOC,GAClB,GAAqB,iBAAVD,GAA0C,mBAAbC,EACpC,MAAM,IAAIC,MAAM,4DAEhBL,KAAKC,UAAUE,IAAUH,KAAKC,UAAUE,GAAOM,IAAIL,KACnDJ,KAAKC,UAAUE,GAAOY,OAAOX,GACM,IAA/BJ,KAAKC,UAAUE,GAAOa,aACfhB,KAAKC,UAAUE,GAGtC,CAEI,MAAAc,CAAOd,KAAUW,GACb,GAAId,KAAKC,UAAUE,GAAQ,CACL,IAAIH,KAAKC,UAAUE,IAC3Be,QAAQd,IACd,IACIA,KAAYU,EAChC,CAAkB,MAAOK,GACLC,QAAQD,MAAM,+BAA+BhB,KAAUgB,EAC3E,GAEA,CACA,CAEI,kBAAAE,CAAmBlB,GACXA,EACIH,KAAKC,UAAUE,WACRH,KAAKC,UAAUE,GAG1BH,KAAKC,UAAY,EAE7B"}